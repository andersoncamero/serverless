service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs20.x
  apiGateway:
    apiKeys:
      - crud-serverless-users-apiKey
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: arn:aws:dynamodb:us-east-1:471893938953:table/usersTable
        - Effect: Allow
          Action: "s3:*"
          Resource: arn:aws:s3:::bucket-serverless-course-123/*
  environment:
    BUCKET: bucket-serverless-course-123
    USER_NAME: dbstaging_plataforma
    PASSWORD: Q@QbE5%Ekx@!
    DATABASE: horus_staging
    HOST: db-hse-staging.ccti8vozmyl6.us-east-2.rds.amazonaws.com
    DATABASE_PORT: 5432
    DIALECT: postgres
    LOGGING: false
    SSL: false

plugins:
  - serverless-offline
  - serverless-dynamodb

package:
  individually: true
  patterns:
    - "!*/**"

custom:
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  get-users:
    handler: getusers/handler.getUsers
    package:
      patterns:
        - "getusers/handler.js"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUsers
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.8
    package:
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signedURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          private: true
          path: signedurl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
  uploadS3:
    handler: uploadS3/handler.thumbnailGenerator
    # layers:
    #   - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "uploadS3/handler.js"
        - "DB/**"
        - "lib/sequelize.js"
        - "node_modules/**"
    events:
      - s3:
          bucket: bucket-serverless-course-123
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/
  get-image:
    handler: getimage/handler.getImage
    package:
      patterns:
        - "getimage/handler.js"
    events:
      - http:
          path: image
          method: GET


# layers:
#   base:
#     name: "prd-dependencies"
#     compatibleRuntimes:
#       - "nodejs20.x"
#     package:
#       artifact: nodejs.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        BucketName: bucket-serverless-course-123
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"
